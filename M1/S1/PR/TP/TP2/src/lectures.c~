#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <errno.h>

#define NB_FILS 2
#define TAILLE_BUF 1

void lire_read(int fd) {
    char buf[TAILLE_BUF];
    while (read(fd, buf, TAILLE_BUF) > 0) {
        printf("%s(lu par PID = %d)\n", buf, getpid());
    }
}

void lecture_posix(char const * const nom_fichier) {
    // Ouverture en lecture seule
    int fd;
    if ((fd = open(nom_fichier, O_RDONLY, 0600)) == -1) {
        perror("Erreur de l'ouverture du fichier (open).\n");
        exit(EXIT_FAILURE);
    }
    
    int i;
    for (i = 0; i < NB_FILS; ++i) {
        pid_t pid;
        
        // Erreur fork
        if ((pid = fork()) == -1) {
            perror("Erreur fork.\n");
            exit(EXIT_FAILURE);
        }
        
        // Fils
        if (pid == 0) {
            lire_read(fd);
            exit(EXIT_SUCCESS);
        }
        // Père
        else {
            lire_read(fd);
        }
    }
}

void lire_fgetc(FILE *const f) {
    char c;
    while (1) {
        c = fgetc(f);
        
        // Fin de fichier
        if (feof(f)) { 
            break;
        }
        
        printf("%c(lu par PID = %d)\n", c, getpid());
    }
}

void lecture_libc(char const * const nom_fichier) {
    FILE *f;
    if ((f = fopen (nom_fichier, "r")) == NULL) {
        perror("Erreur de l'ouverture du fichier (fopen).\n");
        exit(EXIT_FAILURE);
    }
    
    int i;
    for (i = 0; i < NB_FILS; ++i) {
        pid_t pid;
        
        // Erreur fork
        if ((pid = fork()) == -1) {
            perror("Erreur fork.\n");
            exit(EXIT_FAILURE);
        }
        
        // Fils
        if (pid == 0) {
            lire_fgetc(f);
            exit(EXIT_SUCCESS);
        }
        // Père
        else {
            lire_fgetc(f);
        }
    }
}

int main(int argc, char **argv) {
    if (argc != 2) {
        printf("Usage : ./lectures fichier\n");
        return EXIT_FAILURE;
    }
    
    struct stat sb;
    if (stat(argv[1], &sb) == -1) {
        perror("Erreur stat.\n");
        return EXIT_FAILURE;
    }
    
    // On vérifie que c'est bien un fichier régulier
    if (sb.st_mode & S_IFMT != S_IFREG) {
        perror("Le fichier n'est pas un fichier régulier.\n");
        return EXIT_FAILURE;
    }
    
    printf("Fonction lecture_posix\n");
    lecture_posix(argv[1]);
    
    printf("\nFonction lecture_libc\n");
    lecture_libc(argv[1]);
    
    return EXIT_SUCCESS;
}

